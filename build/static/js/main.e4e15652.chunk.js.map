{"version":3,"sources":["components/Formulaire.js","components/Message.js","base.js","App.js","components/Connexion.js","components/NotFound.js","serviceWorker.js","index.js"],"names":["Formulaire","state","message","length","_this","props","createMessage","_this$props","addMessage","pseudo","setState","handleChange","event","target","value","handleKeyUp","key","handleSubmit","preventDefault","react_default","a","createElement","className","onSubmit","this","onChange","onKeyUp","required","maxLength","type","Component","Message","_ref","isUser","base","firebase","initializeApp","apiKey","authDomain","databaseURL","Rebase","createClass","database","App","messages","match","params","messagesRef","createRef","Object","objectSpread","concat","Date","now","keys","slice","forEach","syncState","context","ref","current","scrollTop","scrollHeight","_this2","map","CSSTransition","timeout","classNames","components_Message","TransitionGroup","components_Formulaire","Connexion","goToChat","react_router","push","to","placeholder","NotFound","Boolean","window","location","hostname","ReactDOM","render","react_router_dom","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4e15652.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Formulaire extends Component {\n\n  state= {\n    message: '',\n    length: this.props.length\n  }\n\n  createMessage = () => {\n    const { addMessage, pseudo, length } = this.props\n    const message = {\n      pseudo,\n      message: this.state.message\n    }\n    addMessage(message)\n    this.setState({ message: '', length })\n  }\n\n  handleChange = event => {\n    const message = event.target.value\n    const length = this.props.length - message.length\n    this.setState({ message , length })\n  }\n\n  handleKeyUp = event => {\n    if (event.key === 'Enter') {\n      this.createMessage()\n    }\n  }\n\n  handleSubmit = event => {\n    event.preventDefault()\n    this.createMessage()\n  }\n\n  render() {\n    return (\n      <form\n        className='form' onSubmit={this.handleSubmit}>\n        <textarea\n          onChange={this.handleChange}\n          onKeyUp={this.handleKeyUp} \n          value={this.state.message}\n          required\n          maxLength={this.props.length}\n          />\n          <div className='info' >\n          {this.state.length}\n          </div>\n          <button type='submit'>\n          Envoyer!\n          </button>\n      </form>\n    );\n  }\n}\n\nexport default Formulaire","import React from 'react';\n\nconst Message = ({pseudo, message, isUser}) => {\n  if(isUser(pseudo)) {\n  return (\n    <p className='user-message'>\n    \t{message}\n    </p>\n  ) \n  } else {\n  \treturn (\n    <p className='not-user-message'>\n    \t<strong>{pseudo}: </strong>{message}\n    </p>\n  ) \n  }\n}\n\nexport default Message","import Rebase from 're-base'\nimport firebase from 'firebase/app'\nimport 'firebase/database'\n\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyCEqhG5X_A9qA5BOoByZdA3VfCUjzbDUrY\",\n  authDomain: \"chatbox-react-fcd0c.firebaseapp.com\",\n  databaseURL: \"https://chatbox-react-fcd0c.firebaseio.com\"\n})\n\nconst base = Rebase.createClass(firebase.database())\n\nexport {firebaseApp }\n\nexport default base","import React, { Component, createRef } from 'react'\nimport './App.css'\nimport './animations.css'\n\nimport Formulaire from './components/Formulaire'\nimport Message from './components/Message'\n\n//Firebase\nimport base from './base'\n\n//Animations \n\nimport {\n  CSSTransition,\n  TransitionGroup\n} from 'react-transition-group'\n\nclass App extends Component {\n\tstate = {\n\t\tmessages: {},\n\t\tpseudo: this.props.match.params.pseudo\n\t}\n\n\tmessagesRef = createRef()\n\n\tcomponentDidMount () {\n\t\tbase.syncState('/', {\n\t\t\tcontext: this,\n\t\t\tstate: 'messages'\n\t\t})\n\t}\n\n\tcomponentDidUpdate () {\n\t\tconst ref = this.messagesRef.current\n\t\tref.scrollTop = ref.scrollHeight\n\t}\n\n\taddMessage = message => {\n\t\tconst messages = { ...this.state.messages }\n\t\tmessages[`message ${Date.now()}`] = message\n\n\t\tObject\n\t\t.keys(messages)\n\t\t.slice(0, -10).forEach( (key) => {\n\t\t\tmessages[key] = null\n\t\t});\n\n\t\tthis.setState({ messages })\n\t}\n\n\tisUser =  pseudo => pseudo === this.state.pseudo\n\n  render () {\n  \tconst messages = Object\n  \t.keys(this.state.messages)\n  \t.map(key => (\n      <CSSTransition\n      timeout={200}\n      classNames='fade'\n  \t\tkey={key}>\n  \t\t<Message\n  \t\tisUser ={this.isUser}\n  \t\tpseudo={this.state.messages[key].pseudo}\n  \t\tmessage={this.state.messages[key].message}\n  \t\t/>\n      </CSSTransition>\n      ))\n\n    return (\n      <div className='box'>\n      \t<div>\n      \t\t<div className='messages' ref={this.messagesRef}>\n\t      \t\t<TransitionGroup className='message'>\n\t      \t\t\t{ messages }\n\t      \t\t</TransitionGroup>\n      \t\t</div>\n      \t</div>\n      \t<Formulaire\n      \tlength={140}\n      \tpseudo={this.state.pseudo} \n      \taddMessage={this.addMessage}/>\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\n\nclass Connexion extends Component {\n\n  state = {\n    pseudo:'',\n    goToChat: false\n  }\n\n  handleChange = event => {\n    const pseudo = event.target.value\n    this.setState({ pseudo })\n  }\n\n  handleSubmit = event => {\n    event.preventDefault()\n    this.setState({ goToChat: true })\n  }\n\n  render() {\n    if(this.state.goToChat) {\n      return <Redirect push to={`/pseudo/${this.state.pseudo}`}></Redirect>\n    }\n\n    return (\n      <div className='connexionBox'>\n      \t<form className='connexion' onSubmit={this.handleSubmit}>\n      \t\t<input \n          onChange={this.handleChange}\n      \t\tplaceholder='Enter your Username'\n      \t\ttype='text'\n      \t\trequired \n          />\n\n      \t\t<button type='submit'>GO</button>\n      \t</form>\n      </div>\n    );\n  }\n}\n\nexport default Connexion","import React from 'react';\n\nconst NotFound = () => {\n  return (\n    <h2>Y'a rien ici</h2>\n  )\n}\n\nexport default NotFound","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport Connexion from './components/Connexion'\nimport NotFound from './components/NotFound'\nimport * as serviceWorker from './serviceWorker'\n\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\n\nconst Root = () => (\n  <BrowserRouter>\n    <Switch>\n    \t<Route exact path='/' component={Connexion}/>\n    \t<Route path='/pseudo/:pseudo' component={App}/>\n    \t<Route component={NotFound}/>\n    </Switch>\n  </BrowserRouter>\n  )\n\nReactDOM.render(<Root />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}